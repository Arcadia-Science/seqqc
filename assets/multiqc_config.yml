report_comment: >
  This report has been generated by the <a href="https://github.com/Arcadia-Science/seqqc" target="_blank">Arcadia-Science/seqqc</a> analysis pipeline. 
  The purpose of this pipeline is to rapidly assess the quality of new sequencing data so that you can feel confident depositing it into an <a href="https://www.insdc.org/" target="_blank">INSDC database</a> like the <a href="https://www.ebi.ac.uk/ena/browser/home" target="_blank">European Nucleotide Archive</a> rapidly after data generation.
  In typical academic settings, data would be deposited in a an INSDC database at time of publication, so any quality issues with the data itself would be caught during the analysis. 
  The seqqc pipeline was designed to perform minimum quality control reporting so that data could be posted more closely at time of generation, but also so that quality problems would still be caught prior to deposition. 
  The pipeline is designed to report technical sequencing issues via FastQC, sample similarity with sourmash compare, and potential contamination with sourmash gather. 
  Because this pipeline is designed to run on any type of raw sequencing data, it is purely descriptive and you will need to rely on a combination of your domain specific expertise, the section descriptions, and the results to determine whether there is a quality issue with your sequencing data or not. 
  For information about how to interpret these results, please consult each section of this document.
  Some section documentation as been taken directly from the tool documentation itself.
  Note that documentation in many sections states that for a given problem, you may be able to contact the responsible sequencing facility (if the facility was external to Arcadia) to discuss if resequencing is appropriate.
  If you are and Arcadia and think this may be the case for your data, reach out to Taylor to figure our the best next steps before contacting any facility.
report_section_order:
  fastqc:
    order: -1000
  sourmash:
    order: -1001
  "Arcadia-Science-seqqc-methods-description":
    order: -1002
  software_versions:
    order: -1003
  "Arcadia-Science-seqqc-summary":
    order: -1004

show_analysis_paths: False

extra_fn_clean_exts:
  - ".npy"

section_comments:
  fastqc_sequence_counts: >
    This module counts the number of reads present in each sample and highlights sequence duplication levels (see Sequence Duplication Levels for a discussion of how to interpret sequence duplication levels plot).
    Most of the time, sequences from the same experiment will have a similar sequencing depth and if sequencing is outsourced, you will have communicated your desired sequencing depth to the sequencing facility.
    Make sure the sequencing depth matches expectation within ~15% of your requested depth; if the sequencing depth is dramatically lower than you requested, you may be able to contact the sequencing facility to resequence to the agreed upon depth.
  fastqc_per_base_sequence_quality: >
    This module shows the average quality at each read position in each library.
    The Y axis is the Phred score, a quality metric for sequencing data.
    Phred scores are logarithmically linked to the error probabilities, so a Phred score of 10 corresponds to a 1 in 10 probability of an incorrect base call while a Phred score of 20 corresponds to a 1 in 100 probability of an incorrect base call.
    The X axis corresponds to the base pair position in the read.
    Phred score profiles are usually worse at the beginning and end of reads, but quality typically drops smoothly toward the end of the read (as opposed to suddenly at one position).
    It's common for newer Illumina chemistries to maintain high (>30 or 35) Phred scores across the entire read.
    Nanopore reads typically have lower Phred scores.
    Across all samples in a given experiment, one would expect to see roughly consistent quality scores.
  fastqc_per_sequence_quality_scores: >
    This module shows an alternate visualization of sequence quality scores, counting the number of reads that have specific average quality scores.
    This module allows you to see if a subset of your sequences have universally low quality values.
    Across all samples in a given experiment, one would expect to see roughly consistent results for this module.
  fastqc_per_base_sequence_content: >
    This module reports the proportion of each base (A, T, C, or G) at each position in a read, averaged over all reads.
    It is common for this module to fail on raw data because sequences at the beginning of reads may (should) contain barcodes or adapters that make the sequences non-random.  
    For randomly generated sequence libraries from diverse samples (RNA-seq, metagenomes, genomes, etc), we expect no biases for the middle portion of reads that fall between adapter sequences.
    For sequence libraries generated from less diverse samples (amplicon data), we expect biases throughout the reads.
  fastqc_per_sequence_gc_content: >
    This module reports the average GC content of reads in a library.
    It is common for this module to fail for metagenomes or metatranscriptomes as we would expect a non-normal distribution of GC content owing to the different GC content of the genomes of different community members.
    For sequencing libraries generated from a single organism, it's typical to have a roughly normal distribution.
  fastqc_per_base_n_content: >
    If a sequencer is unable to make a base call with sufficient confidence then it will normally substitute an N rather than a conventional base call.
    This module plots out the percentage of base calls at each position for which an N was called.
    A low percentage of Ns biased toward the beginnig or end of a read is normal.
    If many reads have Ns at a specific position, especially in the middle of the read, this could have been caused by a bubble obscuring the camera during sequencing.
    Excessive Ns caused by technical reasons like that may warrant re-sequencing by the sequencing facility.
    However if a sample was sequenced deeply enough, it may not be necessary to re-sequence to get quality results from your analysis.
  fastqc_sequence_length_distribution: >
    This module reports on the sequence length of samples in your library.
    For raw Illumina sequences, all samples should have the same length.
    If your sequences don't all have the same length, they may have been sequenced at different times or may be trimmed already.
    Long reads will have variable sequence lengths.
  fastqc_sequence_duplication_levels: >
    In a diverse library most sequences will occur only once in the final set. 
    A low level of duplication may indicate a very high level of coverage of the target sequence, but a high level of duplication is more likely to indicate some kind of enrichment bias (eg PCR over amplification).
  fastqc_overrepresented_sequences: >
    A normal high-throughput library will contain a diverse set of sequences, with no individual sequence making up a tiny fraction of the whole. 
    Finding that a single sequence is very overrepresented in the set either means that it is highly biologically significant, or indicates that the library is contaminated, or not as diverse as you expected.
    This module lists all of the sequence which make up more than 0.1% of the total. 
    To conserve memory only sequences which appear in the first 100,000 sequences are tracked to the end of the file. 
    It is therefore possible that a sequence which is overrepresented but doesn't appear at the start of the file for some reason could be missed by this module.
  fastqc_adapter_content: >
    This module reports the presence of adapters and the position in which the adapter was detected in the read.
    It is normal for raw reads to fail this module.
    Adapters are typically removed by during read trimming.
  sourmash-compare-1: >
    Sourmash compare estimates sample similarity using angular similarity. 
    Angular similarity takes both shared sequence content and sequence abundance information into account when estimating similarity.
    Shared sequence content is measured using the intersection over the union of k-mers (<i>k</i> = 21) in each sample.
    About 1/1000th of all distinct k-mers are used to estimate similarity.
    Sequence similarity scores range from 0 to 1 and samples that are more similar will have higher value.
    Note that because this module runs on raw sequencing data, sequencing errors will falsely deflate similarity estimates but should still provide relatively good estimates.
    <b>This module is designed to highlight mislabelled samples or to catch technical artifacts that might lead to outlying replicate samples.</b>
    Replicates or biologically similar samples should have the highest similarity scores.
    Samples are alphabetically ordered on the X and Y axis of the heatmap, and each square represents the similarity score between the intersecting samples.
    You can run your mouse over each heatmap square to highlight the similarity value.
  gather-topfive: >
    Sourmash gather selects the best reference genomes to use for a metagenome analysis, by finding the smallest set of non-overlapping matches to the query in a database.
    <b>This module is designed to assess whether a sequencing sample is contaminated.</b>
    Contamination in sequencing data can come from many different sources. 
    We describe five types below and how this module was designed to test for each type.
    For a list of all genomes included in the contamination detection database, see <a href="https://osf.io/jpdte" target="_blank">this CSV.</a> 
    <ol>
      <li>Contamination from barcode/index hopping during sequencing. This happens most frequently for low-biomass samples and is an illumina artifact. To catch this type of contamination, we screen for sequences of model organisms that are sequenced frequently, as these will be the sequences that are most likely to occur as contaminants because they are the most likely things to be sequenced at any given time. If we get mouse in our algae RNA seq, it is probably from barcode hopping. If your samples has significant contamination from index hopping, you may be able to contact the sequencing facility who performed the sequencing and ask for your sample to be re-sequenced. There are sometimes other indicators that index hopping occurred (like the sequences of the barcodes themselves), so for Arcadians who think this is a problem with your library, reach out and we can help you assess further and determine the best next steps.</li>
      <li>Contamination from humans handling the sample. This could be human sequence or sequence from microbes that live on human skin/oral cavity. We included human DNA and common human skin/oral microbiome species in the contamination database to catch this type of contamination.</li>
      <li>Kit contamination. Kits and reagents have their own microbiome and so DNA extracted from these organisms can sneak into the sample. We added the most common kit contaminant organisms to the database as described in doi:10.1016/j.tim.2018.11.003.</li>
      <li>Contamination caused by accidentally extracting DNA or RNA from an organism in the lab other than your own sample. The contamination detection database contains select species commonly used by Arcadians to try and catch this type of contamination.</li>
      <li>Spike in contamination. Illumina spikes phiX into many of its sequencing runs. We included the phiX spikein sequencing in our contamination detection database. PhiX contamination is normal and non-problematic but should be removed prior to analysis.</li>
    </ol>
    Note that if your sample naturally contains any of the genomes included in the database, those genomes will appear below as part of the classified fraction of the sample.
    For example, if we ran a cheese metagenome through this module we might see <i>Staphylococcus epidermidis</i>.
    <i>S. epidermidis</i> is included in the contamination database because it is a common member of the human skin microbiome, but it is also commonly found in cheese.
    Therefore, as domain experts, we would know that <i>S. epidermidis</i> detection is likely not a result of sample contamination.

export_plots: true
